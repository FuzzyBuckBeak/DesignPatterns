//The Higher level modules should not depend on the lower level modules
//They should depend on the abstractions.

class Handler {
    let fm = FilesystemManager()
    func handle(string: String) {
        fm.save(string: string)
    }
}
class FilesystemManager {
    func save(string: String) {
        // Open a file
        // Save the string in this file
        // Close the file
    }
}

//Here FilesystemManager is the lower level module. Handler class is tighly coupled with the fileManager class making it hard to reuse.
//We should be able to reuse the high-level module with different kind of storages like a database, cloud, and so on.
//Instead of instatntiaing the FileSystemManager class inside the Handler class, we decouple it.
//1. We perform constructor injection - (dependency injection using constructor)
//2. We define protocol to choose the objects on the fly - segregate design pattern.

//We can use handler for any type of storage.

class Handler {
    let storage: Storage
    
    //Construction injection
    init(storage: Storage) {
        self.storage = storage
    }
    func handle(string: String) {
        storage.save(string: string)
    }
}

protocol Storage {
   func save(string: String)
}
class FilesystemManager: Storage {
    func save(string: String) {
        // Open a file in read-mode
        // Save the string in this file
        // Close the file
    }
}
class DatabaseManager: Storage {
    func save(string: String) {
        // Connect to the database
        // Execute the query to save the string in a table
        // Close the connection
    }
}


